GLOBALS "../../sys/lib/sys_globals.4gl"
SCHEMA ldmis

DEFINE prg_arr DYNAMIC ARRAY OF RECORD
       prg_no LIKE secprg.prg_no,
       prg_name LIKE secprg.prg_name
    END RECORD,
    prg_rec RECORD
        prg_no LIKE secprg.prg_no,
        prg_name LIKE secprg.prg_name
    END RECORD,
     ret_prg_no    LIKE secprg.prg_no,
     ret_prg_name  LIKE secprg.prg_name

DEFINE item_arr DYNAMIC ARRAY OF RECORD
       sys_item_no LIKE sys_menu.sys_item_no,
       sys_item_name LIKE sys_menu.sys_item_name,
       up_item_no LIKE sys_menu.up_item_no,
       up_item_name LIKE sys_menu.sys_item_name
    END RECORD,
     ret_item_no    LIKE sys_menu.sys_item_no,
     ret_item_name  LIKE sys_menu.sys_item_name

     
SCHEMA ldpub

DEFINE emp_arr DYNAMIC ARRAY OF RECORD
           emp_no     LIKE pamf01_s.emplno,
           emp_name   LIKE pamf01_s.empl_name
        END RECORD,
        emp_rec RECORD
          emp_no     LIKE pamf01_s.emplno,
           emp_name   LIKE pamf01_s.empl_name
        END RECORD,
        ret_emp_no    LIKE pamf01_s.emplno,
        ret_emp_name  LIKE pamf01_s.empl_name
        
DEFINE dept_arr DYNAMIC ARRAY OF RECORD
           dept_no     LIKE pamf070m.deptno,
           dept_name    LIKE pamf070m.dept_name
        END RECORD,
        dept_rec RECORD
           dept_no     LIKE pamf070m.deptno,
           dept_name    LIKE pamf070m.dept_name
        END RECORD,
        ret_dept_no        LIKE pamf070m.deptno,
        ret_dept_name      LIKE pamf070m.dept_name

SCHEMA ldpur

DEFINE code_arr DYNAMIC ARRAY OF RECORD
       code_item LIKE puru010m.code_item,
       code_desc LIKE puru010m.code_descr
    END RECORD,
    code_rec RECORD
       code_item LIKE puru010m.code_item,
       code_desc LIKE puru010m.code_descr
    END RECORD,
     ret_code_item      LIKE puru010m.code_item,
     ret_code_desc      LIKE puru010m.code_descr
     
SCHEMA ldgla

DEFINE bnk_arr DYNAMIC ARRAY OF RECORD
    bankacc LIKE glam020m.bankacc,
    bankname LIKE glam020m.glbankname
    END RECORD,
    bnk_rec RECORD
    bankacc LIKE glam020m.bankacc,
    bankname LIKE glam020m.glbankname
    END RECORD,
    ret_bnkacc    LIKE glam020m.bankacc,
    ret_bnkname  LIKE glam020m.glbankname

SCHEMA ldcos
DEFINE cost_arr DYNAMIC ARRAY OF RECORD
       cost_center LIKE acmf02.cost_center,
       descr LIKE acmf02.descr
    END RECORD,
    cost_rec RECORD
       cost_center LIKE acmf02.cost_center,
       descr LIKE acmf02.descr
    END RECORD,
     ret_cost_center      LIKE acmf02.cost_center,
     ret_descr      LIKE acmf02.descr

SCHEMA ldstk
DEFINE mt_arr DYNAMIC ARRAY OF RECORD
       mt_id LIKE stkm010m.material_id,
       mt_name LIKE stkm010m.material_name,
       mt_spec LIKE stkm010m.material_spec,
       mt_unit LIKE stkm010m.material_unit
    END RECORD,
    mt_rec RECORD
       mt_id LIKE stkm010m.material_id,
       mt_name LIKE stkm010m.material_name,
       mt_spec LIKE stkm010m.material_spec,
       mt_unit LIKE stkm010m.material_unit
    END RECORD,
    ret_mt_id LIKE stkm010m.material_id,
    ret_mt_name LIKE stkm010m.material_name,
    ret_mt_spec LIKE stkm010m.material_spec,
    ret_mt_unit LIKE stkm010m.material_unit

SCHEMA ldgla
DEFINE acc_arr DYNAMIC ARRAY OF RECORD
       acc_code LIKE glam010m.acc_code,
       acc_name LIKE glam010m.acc_name
    END RECORD,
    acc_rec RECORD
      acc_code LIKE glam010m.acc_code,
      acc_name LIKE glam010m.acc_name
    END RECORD,
     ret_acc_code      LIKE glam010m.acc_code,
     ret_acc_name      LIKE glam010m.acc_name
     
DEFINE curr_pa,idx SMALLINT
#------------------------------------------------------------------------
# 系統所屬程式代號及名稱 查詢頁面
#------------------------------------------------------------------------
FUNCTION disp_prglist(t_sys_no)
DEFINE t_sys_no varchar(4),
       sql_txt STRING ,
       idx,curr_pa SMALLINT

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_prg_list WITH FORM "sys_prg_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_prg_list
  #CALL ui.Interface.loadToolBar("ToolBar1m")

  IF length(t_sys_no) = 0 THEN 
     LET sql_txt = "SELECT prg_no,prg_name FROM secprg ORDER BY prg_no "
  ELSE 
     LET sql_txt = "SELECT prg_no,prg_name FROM secprg " ||
                   "WHERE sys_no = '" || t_sys_no || "' ORDER BY prg_no "
  END IF
  
  PREPARE q1 FROM sql_txt
  
  DECLARE prg_curs CURSOR FOR q1
    
  LET idx = 0
  CALL prg_arr.clear()
  FOREACH prg_curs INTO prg_rec.*
    LET idx = idx + 1
    LET prg_arr[idx].* = prg_rec.*
  END FOREACH
  LET ret_prg_no = ""
  LET ret_prg_name = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY prg_arr TO r_secprg.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa     = arr_curr()
        LET ret_prg_no   = prg_arr[curr_pa].prg_no
        LET ret_prg_name = prg_arr[curr_pa].prg_name
     END IF
  END IF   
  
#CALL sys_sys_contro_toolbar(channel)    #套入自己的tool bar

CLOSE WINDOW sys_prg_list

RETURN ret_prg_no, ret_prg_name
END FUNCTION
#------------------------------------------------------------------------
# 程式所屬畫面項目代號及名稱 查詢頁面
#------------------------------------------------------------------------
FUNCTION disp_item_list(t_sys_no)
DEFINE t_sys_no varchar(4),
       sql_txt STRING ,
       idx,curr_pa SMALLINT

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_item_list WITH FORM "sys_item_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_item_list
  #CALL ui.Interface.loadToolBar("ToolBar1m")

  LET sql_txt = "SELECT sys_item_no,sys_item_name,up_item_no,' ' " ||
                "FROM sys_menu where sys_no = '" || t_sys_no || "' " ||
                "order by item_seq "
  
  PREPARE q2 FROM sql_txt
  
  DECLARE item_curs CURSOR FOR q2
    
  LET idx = 1
  CALL item_arr.clear()
  FOREACH item_curs INTO item_arr[idx].*
    SELECT sys_item_name 
    INTO item_arr[idx].up_item_name
    FROM sys_menu
    WHERE sys_no = t_sys_no AND 
          sys_item_no = item_arr[idx].up_item_no
    IF sqlca.sqlcode <> 0 THEN 
       LET item_arr[idx].up_item_name = item_arr[idx].up_item_no
    END IF
    LET idx = idx + 1
  END FOREACH
  LET ret_item_no = ""
  LET ret_item_name = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY item_arr TO r_sysmenu.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa     = arr_curr()
        LET ret_item_no   = item_arr[curr_pa].sys_item_no
        LET ret_item_name = item_arr[curr_pa].sys_item_name
     END IF
  END IF   
  
#CALL sys_sys_contro_toolbar(channel)    #套入自己的tool bar

CLOSE WINDOW sys_item_list

RETURN ret_item_no, ret_item_name
END FUNCTION
#------------------------------------------------------------------------
# get權限
#------------------------------------------------------------------------
FUNCTION sys_get_priv(channel,s_user,s_priv)
DEFINE channel varchar(20),
       s_user varchar(10),
       s_priv char(7),
       s_add char(1),
       s_del char(1),
       s_upd char(1),
       s_qry char(1),
       s_prt char(1),
       s_exe char(1),
       s_type char(1)

  CALL upshift(channel) RETURNING channel

  SET CONNECTION "mis"
  SELECT padd,pdelete,pmodify,pquery,pprint,pexecute 
  INTO s_add,s_del,s_upd,s_qry,s_prt,s_exe 
      FROM secuprg
      WHERE prg_no = channel AND user_id = s_user

  SELECT u_type 
  INTO s_type
  FROM secuser
  WHERE user_id = s_user AND rownum = 1

  IF s_type = "S" THEN
     LET s_priv = "YYYYYY" || s_type
  ELSE
     LET s_priv = s_add || s_del || s_upd || s_qry || s_prt || s_exe || s_type
     #CALL FGL_WINMESSAGE( "PRIV", s_priv, "information")
  END IF

  RETURN s_priv

END FUNCTION
#------------------------------------------------------------------------
# set動作權限
#------------------------------------------------------------------------
FUNCTION sys_set_act1(d,channel,s_priv,t_type)
DEFINE d ui.Dialog
DEFINE channel varchar(20),
       s_priv char(7),
       t_type char(1),
       act_name_add,act_name_del,act_name_upd,act_name_qry varchar(20),
       act_name_next,act_name_prev,act_name_help varchar(20),
       act_name_first,act_name_last varchar(20)
     
  LET act_name_add = channel || "_add"
  LET act_name_del = channel || "_del"
  LET act_name_upd = channel || "_upd"
  LET act_name_qry = channel || "_query"
  LET act_name_next = channel || "_next"
  LET act_name_prev = channel || "_prev"
  LET act_name_first = channel || "_first"
  LET act_name_last = channel || "_last"
  LET act_name_help = channel || "_help"

#
{  1.normal(新增,查詢,修改,刪除,存檔,離開,說明)
   2.full(新增,查詢,前一筆,後一筆,修改,刪除,存檔,離開,說明)
   3.full query&update&del(查詢,前一筆,後一筆,修改,刪除,存檔,離開,說明)
   4.query&update&del(查詢,修改,刪除,存檔,離開,說明)
   5.query&update&del&back(查詢,前一筆,後一筆,修改,刪除,存檔,返回,離開,說明)
   6.query&update(查詢,修改,存檔,離開,說明)
   7.query(查詢,離開,說明)
   8.exit(離開)
   9.query&update(查詢,前一筆,後一筆,修改,存檔,離開,說明)
   A.update(修改,存檔,離開,說明) ->不鎖權限的toolbar type
   B.add&update(新增,查詢,前一筆,後一筆,修改,存檔,離開,說明)
   C.query&update(查詢,前一筆,後一筆,修改,存檔,離開,說明)
   D.query(查詢,前一筆,後一筆,離開,說明)
   E.full maintain(新增,查詢,前一筆,後一筆,第一筆,最後筆,修改,刪除,存檔,離開,說明)
   F.full query(查詢,前一筆,後一筆,第一筆,最後筆,離開,說明)
   G.save(存檔,離開,說明) ->不鎖權限的toolbar type
   H.add&query&del(新增,查詢,前一筆,後一筆,刪除,存檔)
   I.add&query(新增,查詢,前一筆,後一筆,存檔)
   J.normal& no del(新增,查詢,修改,存檔,離開,說明)
}

#新增  1,2,B,E,H,I,J
#修改  1,2,3,4,5,6,9,B,C,E,J
#刪除  1,2,3,4,5,E,H
#查詢  1,2,3,4,5,6,7,9,B,C,D,E,F,H,I,J
#上下筆 2,3,5,9,B,C,D,E,F,H,I
#第一筆,最後筆 E,F
 
  #系統維護者則權限全開
  IF s_priv[7,7] = "S" THEN
    IF sys_str_find("1,2,B,E,H,I,J",t_type) THEN
      CALL d.setActionActive(act_name_add,TRUE)
    END IF
    IF sys_str_find("1,2,3,4,5,6,7,9,B,C,D,E,F,H,I,J",t_type) THEN
      CALL d.setActionActive(act_name_qry,TRUE)
    END IF
  ELSE
    #add
    IF sys_str_find("1,2,B,E,H,I,J",t_type) THEN
      IF s_priv[1,1] = "Y" THEN
        CALL d.setActionActive(act_name_add,TRUE)
      ELSE 
        CALL d.setActionActive(act_name_add,FALSE)
      END IF
    END IF
    #query
    IF sys_str_find("1,2,3,4,5,6,7,9,B,C,D,E,F,H,I,J",t_type) THEN
      IF s_priv[4,4] = "Y" THEN
        CALL d.setActionActive(act_name_qry,TRUE)
      ELSE 
        CALL d.setActionActive(act_name_qry,FALSE)
      END IF
    ELSE 
      IF sys_str_find("1,2,3,4,5,6,7,9,B,C,D,E,F,H,I,J",t_type) THEN
        CALL d.setActionActive(act_name_qry,FALSE)
      END IF
    END IF
  END IF
  #上下筆
  IF sys_str_find("2,3,5,9,B,C,D,E,F,H,I",t_type) THEN
    CALL d.setActionActive(act_name_next,FALSE)
    CALL d.setActionActive(act_name_prev,FALSE)
  END IF
  #第一,最後筆
  IF sys_str_find("E,F",t_type) THEN
    CALL d.setActionActive(act_name_first,FALSE)
    CALL d.setActionActive(act_name_last,FALSE)
  END IF
  #刪除
  IF sys_str_find("1,2,3,4,5,E,H",t_type) THEN
    CALL d.setActionActive(act_name_del,FALSE)
  END IF
  #修改
  IF sys_str_find("1,2,3,4,5,6,9,B,C,E,J",t_type) THEN
    CALL d.setActionActive(act_name_upd,FALSE)
  END IF
  
  CALL d.setActionActive(act_name_help,TRUE)
  
  
END FUNCTION

#------------------------------------------------------------------------
# set刪修動作權限(查詢後才做設定)
#------------------------------------------------------------------------
FUNCTION sys_set_act2(d,channel,s_priv,t_type)
DEFINE d ui.Dialog
DEFINE channel varchar(20),
       s_priv char(7),
       t_type char(1),
       act_name_del,act_name_upd,act_name_next,act_name_prev varchar(20),
       act_name_first,act_name_last varchar(20)

  LET act_name_del = channel || "_del"
  LET act_name_upd = channel || "_upd"
  LET act_name_next = channel || "_next"
  LET act_name_prev = channel || "_prev"
  LET act_name_first = channel || "_first"
  LET act_name_last = channel || "_last"
 
#新增  1,2,B,E,H,I,J
#修改  1,2,3,4,5,6,9,B,C,E,J
#刪除  1,2,3,4,5,E,H
#查詢  1,2,3,4,5,6,7,9,B,C,D,E,F,H,I,J
#上下筆 2,3,5,9,B,C,D,E,F,H,I
#第一筆,最後筆 E,F
 
  #系統維護者則權限全開
  IF s_priv[7,7] = "S" THEN
    IF sys_str_find("1,2,3,4,5,E,H",t_type) THEN
      CALL d.setActionActive(act_name_del,TRUE)
    END IF
    IF sys_str_find("1,2,3,4,5,6,9,B,C,J",t_type) THEN
      CALL d.setActionActive(act_name_upd,TRUE)
    END IF
    IF sys_str_find("2,3,5,9,B,C,D,E,F,H,I",t_type) THEN
      CALL d.setActionActive(act_name_next,TRUE)
      CALL d.setActionActive(act_name_prev,TRUE)
    END IF
    IF sys_str_find("E,F",t_type) THEN
      CALL d.setActionActive(act_name_first,TRUE)
      CALL d.setActionActive(act_name_last,TRUE)
    END IF
  ELSE
    #delete
    IF sys_str_find("1,2,3,4,5,E,H",t_type) THEN
       IF s_priv[2,2] = "Y" THEN 
          CALL d.setActionActive(act_name_del,TRUE)
       ELSE
          CALL d.setActionActive(act_name_del,FALSE) 
       END IF 
    END IF
    #update
    IF sys_str_find("1,2,3,4,5,6,9,B,C,E,J",t_type) THEN 
       IF s_priv[3,3] = "Y" THEN
         CALL d.setActionActive(act_name_upd,TRUE)
       ELSE
         CALL d.setActionActive(act_name_upd,FALSE)  
       END IF 
    END IF
    #前一筆,後一筆
    IF sys_str_find("2,3,5,9,B,C,D,E,F,H,I",t_type) THEN
      CALL d.setActionActive(act_name_next,TRUE)
      CALL d.setActionActive(act_name_prev,TRUE)
    END IF
    IF sys_str_find("E,F",t_type) THEN
      CALL d.setActionActive(act_name_first,TRUE)
      CALL d.setActionActive(act_name_last,TRUE)
    END IF
  END IF
END FUNCTION

#------------------------------------------------------------------------
# set prt及exe動作權限
#------------------------------------------------------------------------
FUNCTION sys_setact_oth(d,s_priv,act_name,act_type)

DEFINE d ui.Dialog
DEFINE act_name varchar(20),
       s_priv char(7),
       act_type char(3),
       act_yn char(1)

  CASE act_type
   WHEN "prt"
     LET act_yn =  s_priv[5,5] 
   WHEN "exe"
     LET act_yn =  s_priv[6,6] 
  END CASE

  #系統維護者則權限全開
  IF s_priv[7,7] = "S" THEN
    CALL d.setActionActive(act_name,TRUE)
  ELSE
    IF act_yn = "Y" THEN
      CALL d.setActionActive(act_name,TRUE)
    ELSE
      CALL d.setActionActive(act_name,FALSE)
    END IF
  END IF
  
END FUNCTION
#------------------------------------------------------------------------
# check prt及exe動作權限
#------------------------------------------------------------------------
FUNCTION sys_chk_priv(s_priv,act_type)

DEFINE d ui.Dialog
DEFINE s_priv char(7),
       act_type char(3),
       act_yn char(1)

  CASE act_type
   WHEN "prt"
     LET act_yn =  s_priv[5,5] 
   WHEN "exe"
     LET act_yn =  s_priv[6,6] 
  END CASE

  RETURN act_yn 
END FUNCTION 
#------------------------------------------------------------------------
#傳入字串P_STR及找尋字元t_type，回傳FIND OR NOTFOUND
#------------------------------------------------------------------------
FUNCTION sys_str_find(p_str,t_type)
DEFINE p_str string,
       t_type varchar(3),
       pos SMALLINT,
       yn BOOLEAN

 LET pos = p_str.getIndexOf(t_type,1)
 IF pos <> 0 THEN
   LET yn = TRUE
 ELSE
   LET yn = FALSE
 END IF
 
 RETURN yn

END FUNCTION
#------------------------------------------------------------------------
#傳入字串P_STR及找尋字元t_type，回傳FIND OR NOTFOUND
#------------------------------------------------------------------------
FUNCTION sys_str_find1(p_str,t_type)
DEFINE p_str string,
       t_type varchar(3),
       pos SMALLINT,
       yn BOOLEAN

 LET pos = p_str.getIndexOf(t_type,1)
 IF pos <> 0 THEN
   LET yn = TRUE
 ELSE
   LET yn = FALSE
 END IF
 
 RETURN pos

END FUNCTION
#------------------------------------------------------------------------
# 傳回西元系統日期
#------------------------------------------------------------------------
FUNCTION sys_date()
DEFINE yy,mm,dd,sys_date varchar(8)
       
LET yy = year(today)
  LET mm = month(today)
  LET dd = day(today)

  IF length(mm) = 1 THEN
     LET mm = "0" || mm
  END IF

  IF length(dd) = 1 THEN
     LET dd = "0" || dd
  END IF
  
  LET sys_date = yy || mm || dd

RETURN sys_date
  
END FUNCTION

#------------------------------------------------------------------------
# 傳回西元系統時間
#------------------------------------------------------------------------
FUNCTION sys_time()
DEFINE sys_time varchar(6),
       t_time varchar(10),
       hh,mm,ss varchar(2)

LET t_time = TIME ( CURRENT )

LET hh = t_time[1,2]
LET mm = t_time[4,5]
LET ss = t_time[7,8]
LET sys_time = hh || mm || ss

RETURN sys_time

END FUNCTION

#------------------------------------------------------------------------
# 員工姓名  查詢頁面
#------------------------------------------------------------------------
FUNCTION sys_disp_emplist(t_deptno)
DEFINE t_deptno varchar(8)

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_emp_list WITH FORM "sys_emp_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_emp_list
  #CALL ui.Interface.loadToolBar("ToolBar1m")

  IF length(t_deptno) > 0 THEN
       DECLARE emp_curs CURSOR FOR
        SELECT emplno,empl_name
          FROM pamf01_v1_tot
          WHERE deptno = t_deptno
          ORDER BY emplno

        LET idx = 0
        CALL emp_arr.clear()
        FOREACH emp_curs INTO emp_rec.*
          LET idx = idx + 1
          LET emp_arr[idx].* = emp_rec.*
        END FOREACH
 
  ELSE
        DECLARE emp1_curs CURSOR FOR
        SELECT emplno,empl_name
          FROM pamf01_v1_tot
          ORDER BY emplno

        LET idx = 0
        CALL emp_arr.clear()
        FOREACH emp1_curs INTO emp_rec.*
          LET idx = idx + 1
          LET emp_arr[idx].* = emp_rec.*
        END FOREACH
   
  END IF

  LET ret_emp_no = ""
  LET ret_emp_name = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY emp_arr TO r_pamf01s.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa      = arr_curr()
        LET ret_emp_no   = emp_arr[curr_pa].emp_no
        LET ret_emp_name = emp_arr[curr_pa].emp_name
     END IF
  END IF   
  
#CALL sys_contro_toolbar(channel,t_type)    #套入自己的tool bar

CLOSE WINDOW sys_emp_list
RETURN ret_emp_no, ret_emp_name
 
END FUNCTION

#------------------------------------------------------------------------
# 員工單位查詢頁面_僅抓到課(4碼)
#------------------------------------------------------------------------
FUNCTION sys_disp_deptlist()

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_dept_list WITH FORM "sys_dept_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_dept_list
  #CALL ui.Interface.loadToolBar("ToolBar1m")
 
   DECLARE dept_curs CURSOR FOR
    SELECT deptno,dept_name
      FROM pamf070m
    WHERE deptno = substr(deptno,1,4) AND nouse_code <> 'Y'
      ORDER BY deptno
     
  
  LET idx = 0
  CALL dept_arr.clear()
  FOREACH dept_curs INTO dept_rec.*
    LET idx = idx + 1
    LET dept_arr[idx].* = dept_rec.*
  END FOREACH
  LET ret_dept_no = ""
  LET ret_dept_name = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY dept_arr TO r_pamf070m.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa       = arr_curr()
        LET ret_dept_no   = dept_arr[curr_pa].dept_no
        LET ret_dept_name = dept_arr[curr_pa].dept_name
     END IF
  END IF   
  
   
#CALL sys_contro_toolbar(channel,t_type)    #套入自己的tool bar

CLOSE WINDOW sys_dept_list
RETURN ret_dept_no, ret_dept_name
 
END FUNCTION
#------------------------------------------------------------------------
# 員工單位查詢頁面(全)
#------------------------------------------------------------------------
FUNCTION sys_deptlist_all()

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_dept_list WITH FORM "sys_dept_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_dept_list
  #CALL ui.Interface.loadToolBar("ToolBar1m")
 
   DECLARE all_curs CURSOR FOR
    SELECT deptno,dept_name
    FROM pamf070m
    WHERE nouse_code <> 'Y'  
    ORDER BY deptno
     
  
  LET idx = 0
  CALL dept_arr.clear()
  FOREACH all_curs INTO dept_rec.*
    LET idx = idx + 1
    LET dept_arr[idx].* = dept_rec.*
  END FOREACH
  LET ret_dept_no = ""
  LET ret_dept_name = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY dept_arr TO r_pamf070m.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa       = arr_curr()
        LET ret_dept_no   = dept_arr[curr_pa].dept_no
        LET ret_dept_name = dept_arr[curr_pa].dept_name
     END IF
  END IF   
  
   
#CALL sys_contro_toolbar(channel,t_type)    #套入自己的tool bar

CLOSE WINDOW sys_dept_list
RETURN ret_dept_no, ret_dept_name
 
END FUNCTION
#-----------------------------------------------------------------------  
#顯示員工姓名
#-----------------------------------------------------------------------  
FUNCTION sys_show_empname(emp_no)
DEFINE emp_no varchar(8),
       t_emp_name varchar(20)
       
SELECT empl_name INTO t_emp_name
  FROM pamf01_v1_tot
  WHERE emplno = emp_no

  RETURN t_emp_name
  
END FUNCTION

#-----------------------------------------------------------------------  
#顯示單位名稱
#-----------------------------------------------------------------------  
FUNCTION sys_show_depname(dept_no)
DEFINE dept_no varchar(10),
       t_dept_name varchar(30)

SELECT dept_name INTO t_dept_name 
  FROM pamf070m
  WHERE deptno = dept_no
  
  RETURN t_dept_name

END FUNCTION

#------------------------------------------------------------------------
# 得標廠商短名 頁面
#------------------------------------------------------------------------
FUNCTION sys_show_vend_no(v_no)
DEFINE v_no varchar(5),
       s_name varchar(30) 
 SELECT short_name INTO s_name
      FROM pura010m
      WHERE vend_no = v_no
  
 RETURN s_name
 
END FUNCTION

#------------------------------------------------------------------------
# 得標廠商全名 頁面
#------------------------------------------------------------------------
FUNCTION sys_show_vend_no_all(v_no)
DEFINE v_no varchar(5),
       s_name varchar(120) 
 SELECT name INTO s_name
      FROM pura010m
      WHERE vend_no = v_no
  
 RETURN s_name
 
END FUNCTION

#------------------------------------------------------------------------
# 得標廠商(短名)查詢頁面
#------------------------------------------------------------------------
FUNCTION sys_disp_vendlist()

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_vend_list WITH FORM "sys_vend_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_vend_list
  #CALL ui.Interface.loadToolBar("ToolBar1m")
 
   DECLARE vend_curs CURSOR FOR
    SELECT vend_no,short_name
      FROM pura010m
      ORDER BY vend_no
     
  LET idx = 0
  CALL code_arr.clear()
  FOREACH vend_curs INTO code_rec.*
    LET idx = idx + 1
    LET code_arr[idx].* = code_rec.*
  END FOREACH
  LET ret_code_item = ""
  LET ret_code_desc = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY code_arr TO r_pura010m.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa       = arr_curr()
        LET ret_code_item = code_arr[curr_pa].code_item
        LET ret_code_desc = code_arr[curr_pa].code_desc
     END IF
  END IF   
  
   
#CALL sys_contro_toolbar(channel,t_type)    #套入自己的tool bar

CLOSE WINDOW sys_vend_list

RETURN ret_code_item, ret_code_desc
END FUNCTION

#------------------------------------------------------------------------
# 得標廠商(全名)查詢頁面
#------------------------------------------------------------------------
FUNCTION sys_disp_vendlist_all()

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_vend_list WITH FORM "sys_vend_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_vend_list
  #CALL ui.Interface.loadToolBar("ToolBar1m")
 
   DECLARE vend_curs_all CURSOR FOR
    SELECT vend_no,name
      FROM pura010m
      ORDER BY vend_no
     
  LET idx = 0
  CALL code_arr.clear()
  FOREACH vend_curs_all INTO code_rec.*
    LET idx = idx + 1
    LET code_arr[idx].* = code_rec.*
  END FOREACH
  LET ret_code_item = ""
  LET ret_code_desc = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY code_arr TO r_pura010m.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa       = arr_curr()
        LET ret_code_item = code_arr[curr_pa].code_item
        LET ret_code_desc = code_arr[curr_pa].code_desc
     END IF
  END IF   
  
   
#CALL sys_contro_toolbar(channel,t_type)    #套入自己的tool bar

CLOSE WINDOW sys_vend_list

RETURN ret_code_item, ret_code_desc
END FUNCTION

#------------------------------------------------------------------------
# 銀行名稱  查詢頁面
#------------------------------------------------------------------------
FUNCTION sys_disp_bnklist(b_kind)
DEFINE b_kind varchar(1)

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_bnk_list WITH FORM "sys_bnk_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_bnk_list
  #CALL ui.Interface.loadToolBar("ToolBar1m")

  IF length(b_kind) > 0 THEN
  
       DECLARE bnk_curs CURSOR FOR
        SELECT bankacc,glbankname
          FROM glam020m
        WHERE bank_kind = b_kind
          ORDER BY bankacc
     
      LET idx = 0
      CALL bnk_arr.clear()
      FOREACH bnk_curs INTO bnk_rec.*
        LET idx = idx + 1
        LET bnk_arr[idx].* = bnk_rec.*
      END FOREACH
  ELSE
       DECLARE bnk_curs1 CURSOR FOR
        SELECT bankacc,glbankname
          FROM glam020m
        WHERE bank_kind = b_kind
          ORDER BY bankacc
     
      LET idx = 0
      CALL bnk_arr.clear()
      FOREACH bnk_curs1 INTO bnk_rec.*
        LET idx = idx + 1
        LET bnk_arr[idx].* = bnk_rec.*
      END FOREACH

  END IF
  
  LET ret_bnkacc  = ""
  LET ret_bnkname = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY bnk_arr TO r_glam020m.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa     = arr_curr()
        LET ret_bnkacc   = bnk_arr[curr_pa].bankacc
        LET ret_bnkname = bnk_arr[curr_pa].bankname
     END IF
  END IF   
  
#CALL sys_contro_toolbar(channel,t_type)    #套入自己的tool bar

CLOSE WINDOW sys_bnk_list

RETURN ret_bnkacc, ret_bnkname
END FUNCTION

#------------------------------------------------------------------------
# 成本中心查詢頁面
#------------------------------------------------------------------------
FUNCTION sys_disp_costlist()

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_cost_list WITH FORM "sys_cost_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_cost_list
  #CALL ui.Interface.loadToolBar("ToolBar1m")
 
   DECLARE cost_curs CURSOR FOR
    SELECT cost_center,descr
      FROM acmf02
      ORDER BY cost_center
     
  LET idx = 0
  CALL cost_arr.clear()
  FOREACH cost_curs INTO cost_rec.*
    LET idx = idx + 1
    LET cost_arr[idx].* = cost_rec.*
  END FOREACH
  LET ret_cost_center = ""
  LET ret_descr = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY cost_arr TO r_acmf02.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa       = arr_curr()
        LET ret_cost_center = cost_arr[curr_pa].cost_center
        LET ret_descr = cost_arr[curr_pa].descr
     END IF
  END IF   
  
   
#CALL sys_contro_toolbar(channel,t_type)    #套入自己的tool bar

CLOSE WINDOW sys_cost_list

RETURN ret_cost_center, ret_descr
END FUNCTION
#------------------------------------------------------------------------
# 幣別查詢頁面
#------------------------------------------------------------------------
FUNCTION sys_dollar_sign_list()

OPEN WINDOW sys_dollar_sign_list WITH FORM "sys_dollar_sign_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_dollar_sign_list
  #CALL ui.Interface.loadToolBar("ToolBar1m")
 
   DECLARE code_curs CURSOR FOR
    SELECT code_item,code_descr
      FROM puru010m
      WHERE code_type = '04'
      ORDER BY code_item
     
  LET idx = 0
  CALL code_arr.clear()
  FOREACH code_curs INTO code_rec.*
    LET idx = idx + 1
    LET code_arr[idx].* = code_rec.*
  END FOREACH
  LET ret_code_item = ""
  LET ret_code_desc = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY code_arr TO r_puru010m.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa       = arr_curr()
        LET ret_code_item = code_arr[curr_pa].code_item
        LET ret_code_desc = code_arr[curr_pa].code_desc
     END IF
  END IF   
  
CLOSE WINDOW sys_dollar_sign_list

RETURN ret_code_item, ret_code_desc
END FUNCTION

#------------------------------------------------------------------------
# 幣別顯示頁面 
#------------------------------------------------------------------------
FUNCTION sys_show_dollar_sign(t_dollar_sign)
DEFINE t_dollar_sign varchar(10),
       t_code_desc varchar(30)
       
 SELECT code_descr INTO t_code_desc
      FROM puru010m
      WHERE code_type = '04'  AND code_item = t_dollar_sign

  RETURN t_code_desc
END FUNCTION

#------------------------------------------------------------------------
# 物料名稱,規格,單位查詢頁面(可輸入部份物料編號字串查詢)
#------------------------------------------------------------------------
FUNCTION sys_disp_mtlist()
DEFINE mt_index varchar(20)

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_mt_list WITH FORM "sys_mt_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_mt_list
 
 INPUT mt_index FROM mt_index
 CALL upshift(mt_index) RETURNING mt_index
 
 IF length(mt_index) > 0 THEN
   DECLARE mt_curs CURSOR FOR
    SELECT material_id,material_name,material_spec,material_unit
      FROM stkm010m
    WHERE (INSTR(material_id,mt_index) > 0 OR INSTR(material_name,mt_index) > 0) 
     # AND (stop_use <> 'Y') 
      ORDER BY material_id

   LET idx = 0
   CALL mt_arr.clear()
   FOREACH mt_curs INTO mt_rec.*
     LET idx = idx + 1
     LET mt_arr[idx].* = mt_rec.*
   END FOREACH
 ELSE
   DECLARE mt1_curs CURSOR FOR
    SELECT material_id,material_name,material_spec,material_unit
      FROM stkm010m
    ORDER BY material_id

   LET idx = 0
   CALL mt_arr.clear()
   FOREACH mt1_curs INTO mt_rec.*
     LET idx = idx + 1
     LET mt_arr[idx].* = mt_rec.*
   END FOREACH
 END IF
 
 
  LET ret_mt_id = ""
  LET ret_mt_name = ""
  LET ret_mt_spec = ""
  LET ret_mt_unit = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY mt_arr TO r_stkm010m.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa     = arr_curr()
        LET ret_mt_id   = mt_arr[curr_pa].mt_id
        LET ret_mt_name = mt_arr[curr_pa].mt_name
        LET ret_mt_spec = mt_arr[curr_pa].mt_spec
        LET ret_mt_unit = mt_arr[curr_pa].mt_unit
     END IF
  END IF   
  
CLOSE WINDOW sys_mt_list

RETURN ret_mt_id, ret_mt_name,ret_mt_spec,ret_mt_unit
END FUNCTION

#------------------------------------------------------------------------
# 顯示物料規格
#------------------------------------------------------------------------
FUNCTION sys_show_material(m_id)
DEFINE m_id varchar(12),
       m_name varchar(30),
       m_spec varchar(30),
       m_unit varchar(10)

SELECT material_name,material_spec,material_unit
    INTO m_name,m_spec,m_unit
    FROM stkm010m
    WHERE material_id = m_id

RETURN m_name,m_spec,m_unit

END FUNCTION
#------------------------------------------------------------------------
# 會計科目查詢頁面
#------------------------------------------------------------------------
FUNCTION sys_disp_acclist()

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_acc_list WITH FORM "sys_acc_list" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_acc_list
  
   DECLARE acc_curs CURSOR FOR
    SELECT acc_code,acc_name
      FROM glam010m
      ORDER BY acc_code
     
  LET idx = 0
  CALL acc_arr.clear()
  FOREACH acc_curs INTO acc_rec.*
    LET idx = idx + 1
    LET acc_arr[idx].* = acc_rec.*
  END FOREACH
  LET ret_acc_code = ""
  LET ret_acc_name = ""

  IF idx > 0 THEN
      LET int_flag = FALSE
     DISPLAY ARRAY acc_arr TO r_glam010m.* 
         ATTRIBUTES(COUNT=idx)
     IF (NOT int_flag) THEN
        LET curr_pa       = arr_curr()
        LET ret_acc_code = acc_arr[curr_pa].acc_code
        LET ret_acc_name = acc_arr[curr_pa].acc_name
     END IF
  END IF   
  
   
#CALL sys_contro_toolbar(channel,t_type)    #套入自己的tool bar

CLOSE WINDOW sys_acc_list

RETURN ret_acc_code, ret_acc_name
END FUNCTION
#------------------------------------------------------------------------
# sys dialog
# argument remark(form name,prompt string)
# return ans & input string
#------------------------------------------------------------------------
FUNCTION sys_dialog(t_form_txt,t_msg_str)
DEFINE t_form_txt,t_msg_str varchar(100),
       t_input_txt varchar(30),
       t_ans BOOLEAN,
       f ui.Form,
       w ui.Window,
       doc om.DomDocument
       
  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_dialog WITH FORM "sys_dialog" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_dialog

  LET doc = ui.Interface.getdocument()
  LET w = ui.Window.getCurrent()
  LET f = w.getForm()
  #form名稱
  CALL w.setText(t_form_txt)
  CALL f.setElementText("msg_txt",t_msg_str)
  CALL ui.Interface.setText(t_form_txt)

  DIALOG ATTRIBUTE(UNBUFFERED)
     INPUT t_input_txt FROM sys_dialog.input_txt
     END INPUT
 
     ON ACTION act_y
        LET t_ans = TRUE
        EXIT DIALOG

     ON ACTION act_n
        LET t_ans = FALSE
        EXIT DIALOG
     
  END DIALOG

  #CLOSE WINDOW sys_dialog

  RETURN t_input_txt,t_ans
END FUNCTION
#------------------------------------------------------------------------
# sys dialog(input 3 parameter)
# argument remark(form name,prompt string1,prompt string2)
# return ans & input string
#------------------------------------------------------------------------
FUNCTION sys_dialog_2(t_form_txt,t_msg_str1,t_msg_str2)
DEFINE t_form_txt,t_msg_str1,t_msg_str2 varchar(50),
       t_input_txt1,t_input_txt2 varchar(30),
       t_ans BOOLEAN,
       f ui.Form,
       w ui.Window,
       doc om.DomDocument

 CALL ui.Interface.loadStyles(g_style)  
 OPEN WINDOW sys_dialog_2 WITH FORM "sys_dialog_2" ATTRIBUTES (STYLE='dialog')
 CURRENT WINDOW IS sys_dialog_2

  LET doc = ui.Interface.getdocument()
  LET w = ui.Window.getCurrent()
  LET f = w.getForm()
  #form名稱
  CALL w.setText(t_form_txt)
  CALL f.setElementText("msg_txt1",t_msg_str1)
  CALL f.setElementText("msg_txt2",t_msg_str2)
  CALL ui.Interface.setText(t_form_txt)

  DIALOG ATTRIBUTE(UNBUFFERED)
     INPUT t_input_txt1,t_input_txt2 FROM sys_dialog_2.input_txt1,sys_dialog_2.input_txt2
     END INPUT
 
     ON ACTION act_y
        LET t_ans = TRUE
        EXIT DIALOG

     ON ACTION act_n
        LET t_ans = FALSE
        EXIT DIALOG
     
  END DIALOG

  #CLOSE WINDOW sys_dialog_2

  RETURN t_input_txt1,t_input_txt2,t_ans
END FUNCTION
#------------------------------------------------------------------------
# sys dialog(input 3 parameter)
# argument remark(form name,prompt string,show text string)
#------------------------------------------------------------------------
FUNCTION sys_dialog3(t_form_txt,t_msg_str,t_msg_str2)
DEFINE t_form_txt,t_msg_str,t_msg_str2 varchar(100),
       t_input_txt varchar(30),
       t_ans BOOLEAN,
       f ui.Form,
       w ui.Window,
       doc om.DomDocument

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_dialog WITH FORM "sys_dialog" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_dialog

  LET doc = ui.Interface.getdocument()
  LET w = ui.Window.getCurrent()
  LET f = w.getForm()
  #form名稱
  CALL w.setText(t_form_txt)
  CALL f.setElementText("msg_txt",t_msg_str)
  CALL f.setElementText("line",t_msg_str2)
  CALL ui.Interface.setText(t_form_txt)

  DIALOG ATTRIBUTE(UNBUFFERED)
     INPUT t_input_txt FROM sys_dialog.input_txt
     END INPUT
 
     ON ACTION act_y
        LET t_ans = TRUE
        EXIT DIALOG

     ON ACTION act_n
        LET t_ans = FALSE
        EXIT DIALOG
     
  END DIALOG

  #CLOSE WINDOW sys_dialog

  RETURN t_input_txt,t_ans
END FUNCTION
#------------------------------------------------------------------------
# info dialog(input 2 parameter)
# form text & message string
#------------------------------------------------------------------------
FUNCTION sys_execute_ck(t_form_txt,t_msg_str)
DEFINE t_form_txt,t_msg_str varchar(100),
       t_ans BOOLEAN,
       f ui.Form,
       w ui.Window,
       doc om.DomDocument

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_execute_ck WITH FORM "sys_execute_ck" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_execute_ck

  LET doc = ui.Interface.getdocument()
  LET w = ui.Window.getCurrent()
  LET f = w.getForm()
  
  #form名稱
  CALL w.setText(t_form_txt)
  CALL f.setElementText("msg_txt",t_msg_str)
  CALL ui.Interface.setText(t_form_txt)

 MENU 
     ON ACTION act_y
        LET t_ans = TRUE
        EXIT MENU

     ON ACTION act_n
        LET t_ans = FALSE
        EXIT MENU
  END MENU    

  RETURN t_ans
END FUNCTION
#------------------------------------------------------------------------
#window message
#------------------------------------------------------------------------
FUNCTION sys_win_msg(t_form_txt,t_msg_str)
DEFINE t_form_txt,t_msg_str varchar(100),
       t_ans BOOLEAN,
       f ui.Form,
       w ui.Window,
       doc om.DomDocument

  CALL ui.Interface.loadStyles(g_style)
  OPEN WINDOW sys_win_msg WITH FORM "sys_win_msg" ATTRIBUTES (STYLE='dialog')
  CURRENT WINDOW IS sys_win_msg

  LET doc = ui.Interface.getdocument()
  LET w = ui.Window.getCurrent()
  LET f = w.getForm()
  #form名稱
  CALL w.setText(t_form_txt)
  #info
  CALL f.setElementText("msg_txt",t_msg_str)
  CALL ui.Interface.setText(t_form_txt)

 MENU 
     ON ACTION act_y
        LET t_ans = TRUE
        EXIT MENU
 END MENU    

 RETURN t_ans
END FUNCTION
#------------------------------------------------------------------------
# date check
#------------------------------------------------------------------------
FUNCTION sys_date_chk(t_date)
DEFINE t_date  VARCHAR(8)
DEFINE t_date1 varchar(23)
DEFINE t_date_yn BOOLEAN 

   IF length(t_date) = 4 THEN
     LET t_date = t_date || "0101"
   ELSE IF length(t_date) = 6 THEN
     LET t_date = t_date || "01"
   END IF 
   END IF
   
   WHENEVER ERROR CONTINUE 
     SELECT TO_DATE(t_date,'yyyymmdd') INTO t_date1 FROM DUAL
   WHENEVER ERROR STOP
   
   #CALL FGL_WINMESSAGE( LSTR("SYS0019"),SQLCA.sqlcode, "information")

   IF SQLCA.sqlcode = 0 AND t_date1 IS NOT NULL THEN 
     LET t_date_yn = TRUE 
   ELSE 
     LET t_date_yn = FALSE 
   END IF 


   #新增年度判斷
   IF t_date[1,4] < '1911' OR t_date[1,4] > '2100' THEN 
     LET t_date_yn = FALSE 
   END IF 

   RETURN t_date_yn
END FUNCTION 
#------------------------------------------------------------------------
# last day
# pass 2 (yyyymmdd,number(add month))
# return 2 (turn or false,last date(yyyymmdd))
# ex -> passing ('20140310',2) ==> return (true,'20140531')
#------------------------------------------------------------------------
FUNCTION sys_last_day(t_date,t_int)
DEFINE t_date varchar(8) 
DEFINE t_int INTEGER
DEFINE t_date_yn BOOLEAN
DEFINE t_nextdate varchar(8)
 
WHENEVER ERROR CONTINUE
   
    SELECT TO_DATE(t_date,'yyyymmdd') INTO t_nextdate FROM DUAL   
   
    IF SQLCA.sqlcode = 0 AND t_nextdate IS NOT NULL THEN
 
     LET t_date = t_date[1,6]||'01'
    
       LET t_int = t_int +1
       select to_char(add_months(to_date(t_date,'yyyymmdd'),t_int) - 1,'yyyymmdd') 
         INTO t_nextdate from dual
       LET t_date_yn=TRUE
        
    ELSE
       LET t_date_yn = FALSE
       LET t_nextdate = ' '
    END IF
    
    RETURN t_date_yn,t_nextdate
END FUNCTION

#------------------------------------------------------------------------
# date add
# pass 3 (yyyymmdd ; type=y,m,d ; number)
# return 2 (turn or false ; yyyymmdd)
# ex -> passing ('20140310',m,2) ==> return(true,'20140510')
#       passing ('20140310',d,6) ==> return(true,'20140316')
#       passing ('20140310',y,2) ==> return(true,'20160310')
#------------------------------------------------------------------------
FUNCTION sys_date_add(t_date,t_type,t_int)
DEFINE t_date  VARCHAR(8)
DEFINE t_nextdate varchar(23)
DEFINE t_date_yn BOOLEAN 
DEFINE t_type varchar(1)
DEFINE t_int INTEGER 
 
   WHENEVER ERROR CONTINUE
 
    SELECT TO_DATE(t_date,'yyyymmdd') INTO t_nextdate FROM DUAL   
   
    IF SQLCA.sqlcode = 0 AND t_nextdate IS NOT NULL THEN 
   
         IF t_type ='d' THEN 
         select to_char(to_date(t_date,'yyyymmdd')+t_int,'yyyymmdd') 
               INTO t_nextdate from dual 
         END IF
         
         IF t_type ="m" THEN
           select to_char(add_months(to_date(t_date,'yyyymmdd'),t_int),'yyyymmdd') 
               INTO t_nextdate from dual     
         END IF
    #    書上是用day*365算一年,但若遇到閏二月,天數會跟想像中的有差,故改為用月*12
         IF t_type ="y" THEN
           select to_char(add_months(to_date(t_date,'yyyymmdd'),t_int*12),'yyyymmdd') 
               INTO t_nextdate from dual     
         END IF
         LET t_date_yn=TRUE
    ELSE 
       LET t_date_yn = FALSE
       LET t_nextdate = ' '
    END IF     
     
   WHENEVER ERROR STOP
 
   RETURN t_date_yn,t_nextdate
END FUNCTION 
#------------------------------------------------------------------------
# date count (date1 - date2)
# 2 parameter(date1,date2),return result number 
# ex -> passing ('20140320','20140309') ==> return 11
#------------------------------------------------------------------------
FUNCTION sys_date_cnt(t_date1,t_date2)
DEFINE t_date1,t_date2 varchar(8),
       t_cnt INTEGER 

   SELECT to_date(t_date1,'yyyymmdd') - to_date(t_date2,'yyyymmdd') 
   INTO t_cnt
   from dual

   RETURN t_cnt

END FUNCTION 
#-----------------------------------------------------------------------  
#傳回檔案名稱的副檔名(.xxx)及不含副檔名的檔名
#----------------------------------------------------------------------- 
FUNCTION sys_file_type(filename)
DEFINE filename varchar(120),
       s_length,s_pos SMALLINT,
       buf base.StringBuffer,
       s_filetype varchar(5),
       s_filename varchar(120)

 LET buf = base.StringBuffer.create()
 CALL buf.append(filename)
 LET s_pos = buf.getIndexOf(".",1)
  #CALL FGL_WINMESSAGE( "提示", "s_pos="||s_pos, "information")
 LET s_length = length(filename)
  #CALL FGL_WINMESSAGE( "提示", "s_len="||s_length, "information")
 LET s_filetype = buf.subString(s_pos,s_length)
 LET s_filename = buf.subString(1,s_pos-1)

 
 RETURN s_filetype,s_filename
END FUNCTION
#-----------------------------------------------------------------------  
#chec flag
#----------------------------------------------------------------------- 
FUNCTION sys_chk_flag(t_user_id,t_sys_no,t_company)
DEFINE t_flag varchar(1),
       t_sys_no varchar(4),
       t_user_id varchar(8),
       t_company varchar(2)
    
 SET CONNECTION "mis"
 SELECT log_flag
 INTO t_flag 
 FROM sys_log
 WHERE user_id = t_user_id AND sys_no = t_sys_no AND company = t_company

 RETURN t_flag
END FUNCTION 
#-----------------------------------------------------------------------  
#set flag on 
#----------------------------------------------------------------------- 
FUNCTION sys_flag_on(t_user_id,t_sys_no,t_company)
DEFINE t_res SMALLINT,
       t_sys_no varchar(4),
       t_user_id varchar(8),
       t_company varchar(2)

 SET CONNECTION "mis"

 #check exist or not 
 SELECT * FROM sys_log
 WHERE user_id = t_user_id AND sys_no = t_sys_no AND company = t_company
 IF sqlca.sqlcode = 0 THEN 
     UPDATE sys_log
     SET log_flag = 'Y'
     WHERE user_id = t_user_id AND sys_no = t_sys_no AND company = t_company
 ELSE
     INSERT INTO sys_log
     (user_id,sys_no,company,log_flag)
     VALUES
     (t_user_id,t_sys_no,t_company,'Y')
 END IF
 
 LET t_res = sqlca.sqlcode
 
 RETURN t_res
END FUNCTION 
#-----------------------------------------------------------------------  
#set flag off 
#----------------------------------------------------------------------- 
FUNCTION sys_flag_off(t_user_id,t_sys_no,t_company)
DEFINE t_res SMALLINT,
       t_sys_no varchar(4),
       t_user_id varchar(8),
       t_company varchar(2)

 SET CONNECTION "mis"

 UPDATE sys_log
 SET log_flag = 'N'
 WHERE user_id = t_user_id AND sys_no = t_sys_no AND company = t_company

 LET t_res = sqlca.sqlcode
 
 RETURN t_res
END FUNCTION 
